<Layout::Text text-l text-f>
	<h5><i class="fas fa-arrow-left"></i> &nbsp; <Link @link="docs.functions.index">Back to overview</Link></h5>
    <h2>Embedded scripting functions</h2>
	<p>SurrealDB allows for advanced functions with complicated logic, by allowing embedded functions to be written in JavaScript. These functions support the ES2020 JavaScript specification.</p>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Simple functions</h3>
	<p>Embedded JavaScript functions within SurrealDB support all functionality in the ES2020 specification including async / await functions, and generator functions. Any value from SurrealDB is converted into a JavaScript type automatically, and the return value from the JavaScript function is converted to a SurrealDB value.</p>
	<Code @name="docs-functions-script-simple.sql">
		CREATE person SET scores = fn::script -> () => {
			return [1,2,3].map(v => v * 10);
		};
	</Code>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Function context</h3>
	<p>The <code>this</code> context of each embedded function is automatically set to the current document on every invocation. This allows the function to access the properties and fields of the current record being accessed / modified.</p>
	<Code @name="docs-functions-script-context.sql">
		CREATE film SET
			ratings = [
				{ rating: 6, user: user:bt8e39uh1ouhfm8ko8s0 },
				{ rating: 8, user: user:bsilfhu88j04rgs0ga70 },
			],
			featured = fn::script -> () => {
				return this.ratings.filter(r => {
					return r.rating >= 7;
				}).map(r => {
					return { ...r, rating: r.rating * 10 };
				});
			}
		;
	</Code>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Function arguments</h3>
	<p>Additional arguments can be passed in to the function from SurrealDB, and these are accessible using the <code>arguments</code> object within the JavaScript function.</p>
	<Code @name="docs-functions-script-arguments.sql">
		-- Create a new parameter
		LET $value = "SurrealDB";
		-- Create a new parameter
		LET $words = ["awesome", "advanced", "cool"];
		-- Pass the parameter values into the function
		CREATE article SET summary = fn::script -> ($value, $words) => {
			return `${arguments[0]} is ${arguments[1].join(', ')}`;
		};
	</Code>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>JavaScript types</h3>
	<p>Any value from SurrealDB is converted into a JavaScript type automatically, and the return value from the JavaScript function is converted to a SurrealDB value. Boolean values, Integers, Floats, Strings, Arrays, Objects, and Date objects are all converted automatically to and from SurrealDB values.</p>
	<Code @name="docs-functions-script-types-date.sql">
		CREATE user:test SET created_at = fn::script -> () => {
			return new Date();
		};
	</Code>
	<p>In addition a number of special classes are included within the JavaScript functions, for the additional types which are not built into JavaScript. These enable the creation of <Link @link="docs.datamodel.simple"><code>duration</code></Link> values, <Link @link="docs.datamodel.records"><code>record</code></Link> values, and <Link @link="docs.datamodel.simple"><code>UUID</code></Link> values from within JavaScript.</p>
	<Code @name="docs-functions-script-types-classes.sql">
		CREATE user:test SET
			session_timeout = fn::script -> () => {
				return new Duration('1w');
			},
			best_friend = fn::script -> () => {
				return new Record('user', 'joanna');
			},
			identifier = fn::script -> () => {
				return new Uuid('03412258-988f-47cd-82db-549902cdaffe');
			}
		;
	</Code>
</Layout::Text>

<Layout::Gap large />