{{#in-element (document-head) insertBefore=null}}
	<title>SurrealDB | Roadmap | The next generation serverless cloud database</title>
	<meta name="title" property="og:title" content="The next generation serverless cloud database">
	<meta name="description" content="With an SQL-style query language, real-time queries with highly-efficient related data retrieval, advanced security permissions for multi-tenant access, and support for performant analytical workloads, SurrealDB is the next generation serverless database.">
	<meta name="image" property="og:image" content="/static/img/preview/roadmap.jpg">
	<meta property="og:type" content="website">
{{/in-element}}

<Layout::Gap mini />

<Layout::Text text-l>
	<h1>Roadmap</h1>
	<h4><l blue>Version 0.1.28</l></h4>
	<p>We have some amazing things planned for SurrealDB and we can't wait to show you. If you are interested in using SurrealDB and want to get started sooner, click the button above to add yourself to the waiting list.</p>
	<p>
		<a {{on "click" (scroll-into-view "#architecture" smooth=true)}}>Architecture</a>
		&bull;
		<a {{on "click" (scroll-into-view "#platform" smooth=true)}}>Platform</a>
		&bull;
		<a {{on "click" (scroll-into-view "#datamodel" smooth=true)}}>Data model</a>
		&bull;
		<a {{on "click" (scroll-into-view "#surrealql" smooth=true)}}>SurrealQL</a>
		&bull;
		<a {{on "click" (scroll-into-view "#functions" smooth=true)}}>Functions</a>
		&bull;
		<a {{on "click" (scroll-into-view "#permissions" smooth=true)}}>Permissions</a>
		&bull;
		<a {{on "click" (scroll-into-view "#connectivity" smooth=true)}}>Connectivity</a>
		&bull;
		<a {{on "click" (scroll-into-view "#tooling" smooth=true)}}>Tooling</a>
		&bull;
		<a {{on "click" (scroll-into-view "#libraries" smooth=true)}}>Libraries</a>
	</p>
</Layout::Text>

<Layout::Gap mini />

<section id="architecture">

	<Layout::Text text-l>
		<h2>Architecture</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				Single-node (in-memory)
				<l green>Done</l>
			</h4>
			<p>SurrealDB can be configured to run in a single-node memory-only runtime, enabling high-performance querying and data analysis. This is suitable for data which fits inside the memory of a single machine.</p>
		</block>
		<block>
			<h4 flex row middle>
				Single-node (on-disk)
				<l green>Done</l>
			</h4>
			<p>When data sizes are greater than the available memory on a single machine, on-disk storage using <a href="https://rocksdb.org" rel="noopener noreferrer" target="_blank">RocksDB</a> can be used to enable larger data storage capabilities. Recently accessed data resides in memory with caching.</p>
		</block>
		<block>
			<h4 flex row middle>
				Distributed (3-node)
				<l pink>Post 1.0</l>
			</h4>
			<p>For highly-available setups, SurrealDB can be run in a cluster using the <a href="https://raft.github.io" rel="noopener noreferrer" target="_blank">RAFT</a> consensus algorithm. The storage of the entire database must be less than the maximum possible storage of a single machine in the cluster.</p>
		</block>
		<block>
			<h4 flex row middle>
				Distributed (distributed kv-store)
				<l yellow>Partially done</l>
			</h4>
			<p>For highly-available and highly-scalable setups, SurrealDB can be run on top of a <a href="https://tikv.org" rel="noopener noreferrer" target="_blank">TiKV</a> cluster, with the ability to horizontally scale to <code>100+</code> terabytes of data.</p>
		</block>
	</Layout::Blocks>

</section>

<section id="platform">

	<Layout::Text text-l>
		<h2>Platform</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				Multi-tenancy data separation
				<l green>Done</l>
			</h4>
			<p>Split data into namespaces and databases. There is no limit to the number of databases under each namespace, with the ability to switch between databases inside queries and transactions.</p>
		</block>
		<block>
			<h4 flex row middle>
				Schemafull or schemaless
				<l green>Done</l>
			</h4>
			<p>Store unstructured nested data with any arbritrary columns, or limit data stored to only specific columns or fields. Get started quickly without having to define every column, and move to schemafull when your data model is defined.</p>
		</block>
		<block>
			<h4 flex row middle>
				Multi-table, multi-row transactions
				<l green>Done</l>
			</h4>
			<p>As a fully ACID compliant database, SurrealDB allows you to run transactions across multiple-rows, and across multiple different tables. There is no limit to the length of time a transaction can run.</p>
		</block>
		<block>
			<h4 flex row middle>
				Versioned temporal tables
				<l purple>Planned for 1.x</l>
			</h4>
			<p>Versioned temporal tables enable the option to 'go back in time' when querying your data. See how data looked before changes were made, or restore to a particular point-in-time. Each table can be individually configured as a versioned table.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				Table fields
				<l green>Done</l>
			</h4>
			<p>When a table is defined as schemafull, only data allowed by defined fields will be stored. Table fields can be nested, and can be limited to a certain data type. <code>VALUE</code> clauses can be used to ensure a default value is always specified if no data is entered.</p>
		</block>
		<block>
			<h4 flex row middle>
				Table events
				<l green>Done</l>
			</h4>
			<p>Table events can be triggered after any change or modification to the data in a record. Each trigger is able to see the <code>$before</code> and <code>$after</code> value of the record, enabling advanced custom logic with each trigger.</p>
		</block>
		<block>
			<h4 flex row middle>
				Table indexes
				<l green>Done</l>
			</h4>
			<p>Table indexes improve data querying performance, and also allow for <code>UNIQUE</code> values in a table. Table indexes can be specified for a column, multiple columns, and have support for all nested fields including arrays and objects.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1 as |block|>
		<block>
			<Code min-h-100 @name="roadmap/platform/define.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				Table constraints
				<l green>Done</l>
			</h4>
			<p>Each defined table field supports an <code>ASSERT</code> clause which acts as a constraint on the data. This clause enables advanced SurrealQL statements which can ensure that the <code>$value</code> entered is within certain parameters. Each clause is also able to see the <code>$before</code> and <code>$after</code> value of the record, enabling advanced custom logic with each trigger.</p>
		</block>
		<block>
			<Code min-h-100 @name="roadmap/platform/constraints.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				Full text indexing and filtering
				<l purple>Planned for 1.x</l>
			</h4>
			<p>The ability to define full-text indexes, with functionality to search through the full-text index on a table. Using a Apache Lucene query syntax, searches support field queries, wildcard searches, fuzzy searches, proximity searches, relevance matching, boolean operators, subquery grouping, and field grouping.</p>
		</block>
		<block>
			<Code min-h-100 @name="roadmap/platform/fulltext.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1 as |block|>
		<block>
			<h4 flex row middle>
				Pre-defined aggregate computed views
				<l green>Done</l>
			</h4>
			<p>Aggregate views let you pre-compute analytics queries as data is written to SurrealDB. Similarly to an index, a table view lets you select, aggregate, group, and order data, with support for moving averages, time-based windowing, and attribute-based counting. Pre-defined aggregate views are efficient and performant, with only a single record modification being made for every write.</p>
		</block>
		<block>
			<Code @name="roadmap/platform/views.sql" />
		</block>
	</Layout::Blocks>

</section>

<section id="datamodel">

	<Layout::Text text-l>
		<h2>Data model</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				Basic types
				<l green>Done</l>
			</h4>
			<p>Support for booleans, strings, and numerics is built in by default. Numeric values default to <code>decimal</code> based numbers, but can be stored as <code>int</code> or <code>float</code> values for 64 bit integer or 64 bit floating point precision.</p>
		</block>
		<block>
			<h4 flex row middle>
				Empty values
				<l green>Done</l>
			</h4>
			<p>Values can be <code>NONE</code>, or <code>NULL</code>. A field which is <code>NONE</code> does not have any data stored, while <code>NULL</code> values are values which are entered but empty. The <code>EMPTY</code> query operator can be used to match both types.</p>
		</block>
		<block>
			<h4 flex row middle>
				Arrays
				<l green>Done</l>
			</h4>
			<p>SurrealDB has native support for arrays, with no limit to the depth of nesting within arrays. Arrays can contain any other data value.</p>
		</block>
		<block>
			<h4 flex row middle>
				Objects
				<l green>Done</l>
			</h4>
			<p>Embedded object types are an integral feature of SurrealDB, with no limit to the depth of nesting for objects.</p>
		</block>
		<block>
			<h4 flex row middle>
				Durations
				<l green>Done</l>
			</h4>
			<p>Any duration from nanoseconds to weeks can be stored and used for calculations. Durations can be added to datetimes, and to other durations.</p>
		</block>
		<block>
			<h4 flex row middle>
				Datetimes
				<l green>Done</l>
			</h4>
			<p>Suppport for dates and datetimes in ISO-8601 format are supported. All dates are converted and stored in the UTC timezone.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1-2 as |block|>
		<block>
			<h4 flex row middle>
				Geometries
				<l green>Done</l>
			</h4>
			<p>SurrealDB makes working with GeoJSON easy, with support for <code>Point</code>, <code>Line</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLine</code>, <code>MultiPolygon</code>, and <code>Collection</code> values. SurrealQL automatically detects GeoJSON objects converting them into a single data type.</p>
		</block>
		<block>
			<Code @name="roadmap/data/geometries.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				Futures
				<l green>Done</l>
			</h4>
			<p>Values which should be computed only when outputting data, can be stored as futures. These values are stored in SurrealDB as SurrealQL code, and are calculated only when output as part of a <code>SELECT</code> clause.</p>
		</block>
		<block>
			<h4 flex row middle>
				Casting
				<l green>Done</l>
			</h4>
			<p>In SurrealDB, all data values are strongly typed. Values can be cast and converted to other types using specific casting operators. These include <code>bool</code>, <code>int</code>, <code>float</code>, <code>string</code>, <code>number</code>, <code>decimal</code>, <code>datetime</code>, and <code>duration</code> casts.</p>
		</block>
		<block>
			<Code min-h-100 @name="roadmap/data/futures.sql" />
		</block>
		<block>
			<Code min-h-100 @name="roadmap/data/casting.sql" />
		</block>
	</Layout::Blocks>

</section>

<section id="surrealql">

	<Layout::Text text-l>
		<h2>SurrealQL</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-1-2 as |block|>
		<block>
			<h4 flex row middle>
				SELECT, CREATE, UPDATE, DELETE statements
				<l green>Done</l>
			</h4>
			<p>Manipulation and querying of data in SurrealQL is done using the <code>SELECT</code>, <code>CREATE</code>, <code>UPDATE</code>, and <code>DELETE</code> methods. These enable selecting or modifying individual records, or whole tables. Each statement supports multiple different tables or record types at once.</p>
		</block>
		<block>
			<Code @name="roadmap/surrealql/statements.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				RELATE statements
				<l green>Done</l>
			</h4>
			<p>The <code>RELATE</code> statement adds graph edges between records in SurrealDB. It follows the convention of <code>vertex -> edge -> vertex</code> or <code>noun -> verb -> noun</code>, enabling the addition of metadata to the edge record.</p>
		</block>

		<block>
			<h4 flex row middle>
				INSERT statements
				<l green>Done</l>
			</h4>
			<p>The <code>INSERT</code> statement resembles the traditional SQL statement, enabling users to get started quickly. It supports the creation of records using a <code>VALUES</code> clause, or by specifying the record data as an object.</p>
		</block>
		<block>
			<Code @name="roadmap/surrealql/relate.sql" />
		</block>
		<block>
			<Code @name="roadmap/surrealql/insert.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				Parameters
				<l green>Done</l>
			</h4>
			<p>Parameters can be used to store values or result sets, and can be used as stored parameters in client code.</p>
		</block>
		<block>
			<h4 flex row middle>
				Subqueries
				<l green>Done</l>
			</h4>
			<p>Recursive subqueries are useful for advanced querying or modification of values, whilst simplifying the overall query.</p>
		</block>
		<block>
			<h4 flex row middle>
				Nested field queries
				<l green>Done</l>
			</h4>
			<p>In SurrealQL any nested array or object value can be accessed and manipulated using traditional dot notation <code>.</code>, or array notation <code>[]</code>.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1-2 as |block|>
		<block>
			<h4 flex row middle>
				Maths operators
				<l green>Done</l>
			</h4>
			<p>Maths operators can be used to perform complex mathematical calculations directly in SurrealQL.</p>
			<h4 flex row middle>
				Geospatial operators
				<l green>Done</l>
			</h4>
			<p>Geospatial operators enable geospatial containment and intersection operators on geospatial types.</p>
			<h4 flex row middle>
				Set operators
				<l green>Done</l>
			</h4>
			<p>Advanced set operators can be used to detect whether one or multiple values are included within an array. Fuzzy matching and regex matching can also be used for advanced filtering.</p>
		</block>
		<block>
			<Code @name="roadmap/surrealql/operators.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1 as |block|>
		<block>
			<h4 flex row middle>
				Expressions
				<l green>Done</l>
			</h4>
			<p>SurrealQL supports fetching data using dot notation <code>.</code>, array notation <code>[]</code>, and graph semantics <code>-></code>. SurrealQL enables records to link to other records and traverses all embedded links or graph connections as desired. When traversing and fetching remote records SurrealQL enables advanced filtering using traditional <code>WHERE</code> clauses.</p>
		</block>
		<block>
			<Code @name="roadmap/surrealql/expressions.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				IDE language support
				<l pink>Post 1.0</l>
			</h4>
			<p>SurrealDB aims to include official language highlighting packages for Atom, Sublime Text, Visual Studio Code, and Vim.</p>
		</block>
		<block>
			<h4 flex row middle>
				Language Server Protocol
				<l pink>Post 1.0</l>
			</h4>
			<p>SurrealDB will support the Language Server Protocol which will help with code and query completion, and error highlighting for SurrealQL.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1-2 as |block|>
		<block>
			<h4 flex row middle>
				Learning fields
				<l pink>Future</l>
			</h4>
			<p>Learning fields bring machine-learning based decision-making directly into SurrealDB. When a value is not entered directly, then the field can be automatically calculated based on the machine learning analysis of other specified columns or fields.</p>
		</block>
		<block>
			<Code @name="roadmap/surrealql/learning.sql" />
		</block>
	</Layout::Blocks>

</section>

<section id="functions">

	<Layout::Text text-l>
		<h2>Functions</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				Array functions
				<l green>Done</l>
			</h4>
			<p>Functions for manipulation, joining, and diffing of arrays are built in to SurrealDB as standard.</p>
		</block>
		<block>
			<h4 flex row middle>
				Http functions
				<l green>Done</l>
			</h4>
			<p>HTTP functions can be used for remote trigger events and webhook functionality.</p>
		</block>
		<block>
			<h4 flex row middle>
				Math functions
				<l green>Done</l>
			</h4>
			<p>Math functions can be used for complex statistical analysis of numbers and sets of numbers.</p>
		</block>
		<block>
			<h4 flex row middle>
				String functions
				<l green>Done</l>
			</h4>
			<p>Functions for string manipulation enable modification and processing of strings.</p>
		</block>
		<block>
			<h4 flex row middle>
				Parsing functions
				<l green>Done</l>
			</h4>
			<p>Parsing functions can be used for parsing and extracting individual parts or urls, emails, and domains.</p>
		</block>
		<block>
			<h4 flex row middle>
				Rand functions
				<l green>Done</l>
			</h4>
			<p>Random generation functions can be used to generate random values, numbers, strings, UUIDs, and datetimes.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 main-t as |block|>
		<block>
			<h4 flex row middle>
				Geo functions
				<l green>Done</l>
			</h4>
			<p>Geospatial functions can be used for converting between geohash values, and for calculating the distance, bearing, and area of GeoJSON data types.</p>
		</block>
		<block>
			<h4 flex row middle>
				Time functions
				<l green>Done</l>
			</h4>
			<p>Time functions can be used to manipulate dates and times - with support for rounding, and extracting specific parts of datetimes.</p>
		</block>
		<block>
			<Code @name="roadmap/functions/geo.sql" />
		</block>
		<block>
			<Code @name="roadmap/functions/time.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 main-t as |block|>
		<block>
			<h4 flex row middle>
				Count functions
				<l green>Done</l>
			</h4>
			<p>SurrealDB supports general count functionality for counting total values, or for aggregate grouping. It's also possible to count only those expressions which result in a truthy value.</p>
		</block>
		<block>
			<h4 flex row middle>
				Validation functions
				<l green>Done</l>
			</h4>
			<p>Validation functions can be used to determine that field values match a certain pattern including hexadecimal, alphanumeric, ascii, numeric, or email addresses.</p>
		</block>
		<block>
			<Code @name="roadmap/functions/count.sql" />
		</block>
		<block>
			<Code @name="roadmap/functions/check.sql" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1 as |block|>
		<block>
			<h4 flex row middle>
				Javascript functions
				<l pink>Post 1.0</l>
			</h4>
			<p>Javascript functions can be used for more complex functions and triggers. Each Javascript function iteration runs with its own context isolation - with the current record data passed in as the execution context or <code>this</code> value.</p>
		</block>
		<block>
			<Code min-h-200 @name="roadmap/functions/javascript.sql" />
		</block>
	</Layout::Blocks>

</section>

<section id="permissions">

	<Layout::Text text-l>
		<h2>Permissions</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				Root access
				<l green>Done</l>
			</h4>
			<p>Root access enables full data access for all data in SurrealDB. Root access can be limited to specific <code>IPv4</code> or <code>IPv6</code> IP addresses.</p>
		</block>
		<block>
			<h4 flex row middle>
				Namespace access
				<l green>Done</l>
			</h4>
			<p>Namespace access enables full data access for all databases under a specific namespace. This access level is controlled using custom defined usernames and passwords.</p>
		</block>
		<block>
			<h4 flex row middle>
				Database access
				<l green>Done</l>
			</h4>
			<p>Database access enables full data access to a specific database under a specific namespace. This access level is controlled using custom defined usernames and passwords.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				Scope access
				<l green>Done</l>
			</h4>
			<p>Scope access is the powerful functionality which enables SurrealDB to oeprate as a web database. Flexibile authentication and access rules enable fine-grained access to tables and fields with the highest security, whilst ensuring that performance is affected as little as possible.</p>
		</block>
		<block>
			<h4 flex row middle>
				3rd party authentication
				<l green>Done</l>
			</h4>
			<p>If authentication with a 3rd party 0Auth provider is desired, specific tokens can be used for authentication with SurrealDB. <code>ES256</code>, <code>ES384</code>, <code>ES512</code>, <code>HS256</code>, <code>HS384</code>, <code>HS512</code>, <code>PS256</code>, <code>PS384</code>, <code>PS512</code>, <code>RS256</code>, <code>RS384</code>, and <code>RS512</code> algorithms are supported.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1 as |block|>
		<block>
			<Code @name="roadmap/permissions/scope.sql" />
		</block>
		<block>
			<Code @name="roadmap/permissions/scope.js" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-1-2 as |block|>
		<block>
			<h4 flex row middle>
				Table permissions
				<l green>Done</l>
			</h4>
			<p>Fine-grained table permissions can be used to prevent users from accessing data which they shouldn't see. Independent permissions for selecting, creating, updating, and deleting data are supported, ensuring fine-grained control over all data in SurrealDB.</p>
		</block>
		<block>
			<Code @name="roadmap/permissions/table.sql" />
		</block>
	</Layout::Blocks>

</section>

<section id="connectivity">

	<Layout::Text text-l>
		<h2>Connectivity</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-1-2 as |block|>
		<block>
			<h4 flex row middle>
				REST API
				<l green>Done</l>
			</h4>
			<p>All tables and data can be queried using a traditional Key-Value REST API. In addition, SurrealQL statements can be submitted to the REST API for custom query logic.</p>
		</block>
		<block>
			<Code min-h-200 @name="roadmap/connectivity/api.shell" />
		</block>
	</Layout::Blocks>

	<Layout::Line />

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				SurrealQL over WebSocket
				<l green>Done</l>
			</h4>
			<p>SurrealQL querying and data modification is supported over WebSockets for bi-directional communication, and real-time updates.</p>
		</block>
		<block>
			<h4 flex row middle>
				JSON-RPC over WebSocket
				<l green>Done</l>
			</h4>
			<p>Querying and data modification is available using JSON-RPC over WebSockets, enabling easier implementation of 3rd party libraries.</p>
		</block>
	</Layout::Blocks>

	<Layout::Line />

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				GraphQL querying
				<l pink>Post 1.x</l>
			</h4>
			<p>Support for querying all data using GraphQL, with embedded and remote record fetching.</p>
		</block>
		<block>
			<h4 flex row middle>
				GraphQL mutations
				<l pink>Post 1.x</l>
			</h4>
			<p>Support for modifying and updating any data using GraphQL, depending on permissions.</p>
		</block>
		<block>
			<h4 flex row middle>
				GraphQL subscriptions
				<l pink>Post 1.x</l>
			</h4>
			<p>Support for subscribing to real-time data modification events, depending on permissions.</p>
		</block>
	</Layout::Blocks>

</section>

<section id="tooling">

	<Layout::Text text-l>
		<h2>Tooling</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-1 as |block|>
		<block>
			<h4 flex row middle>
				Command-line tool
				<l green>Done</l>
			</h4>
			<p>The command-line tool can be used to export data as SurrealQL, import data as SurrealQL, and start a SurrealDB instance or cluster.</p>
		</block>
		<block>
			<Code min-h-200 @name="roadmap/tooling/cli.shell" />
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				SQL export
				<l green>Done</l>
			</h4>
			<p>Export all data as SurrealQL from a SurrealDB database for backup purposes. This includes authentication scopes, tables, fields, events, indexes, and data.</p>
		</block>
		<block>
			<h4 flex row middle>
				SQL import
				<l green>Done</l>
			</h4>
			<p>Import SurrealQL into a SurrealDB database in order to restore from a backup. This includes authentication scopes, tables, fields, events, indexes, and data.</p>
		</block>
		<block>
			<h4 flex row middle>
				Data backup
				<l pink>Post 1.0</l>
			</h4>
			<p>Export all data from SurrealDB as raw binary data. This will also support incremental binary backups for efficient backing up of SurrealDB clusters.</p>
		</block>
	</Layout::Blocks>

	<Layout::Line />

	<Layout::Blocks cols-2 as |block|>
		<block>
			<h4 flex row middle>
				Docker container
				<l green>Done</l>
			</h4>
			<p>In addition to binary releases, SurrealDB is packaged as a Docker container for easy setup and configuration. All configuration is done with the command-line options. The Docker container can be used to start a SurrealDB instance or cluster, or to import and export data.</p>
		</block>
		<block>
			<Code min-h-100 @name="roadmap/tooling/docker.shell" />
		</block>
	</Layout::Blocks>

	<Layout::Line />

	<Layout::Blocks cols-1 as |block|>
		<block>
			<h4 flex row middle>
				User interface
				<l purple>Planned for 1.x</l>
			</h4>
			<p>An easy-to-use interface with support for table-based views, SurrealQL querying, embedded object editing, and graph visualisation. The interface will be embedded within every SurrealDB executable.</p>
		</block>
	</Layout::Blocks>

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				<i class="fab fa-chrome font-30 m-r-10"></i>
				Web app
				<l purple>Planned for 1.x</l>
			</h4>
			<p>The interface will be available as a web app. This can be used for connecting to SurrealDB Cloud or a local / enterprise cluster.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-apple font-30 m-r-10"></i>
				macOS app
				<l purple>Planned for 1.x</l>
			</h4>
			<p>The interface will be available as an Electron application for macOS. This can be used for connecting to SurrealDB Cloud or a local / enterprise cluster.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-windows font-30 m-r-10"></i>
				Windows app
				<l purple>Planned for 1.x</l>
			</h4>
			<p>The interface will be available as an Electron application for Windows. This can be used for connecting to SurrealDB Cloud or a local / enterprise cluster.</p>
		</block>
	</Layout::Blocks>

</section>

<section id="libraries">

	<Layout::Text text-l>
		<h2>Libraries</h2>
	</Layout::Text>

	<Layout::Gap mini />

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				<i class="fab fa-js font-30 m-r-10"></i>
				Javascript
				<l green>Done</l>
			</h4>
			<p>A real-time, fast SDK library for Javascript with bi-directional communication, and support for <code>async</code> / <code>await</code> programming styles.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-golang font-30 m-r-10"></i>
				Golang
				<l green>Done</l>
			</h4>
			<p>A real-time, fast SDK library for Golang with bi-directional communication over WebSockets.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-python font-30 m-r-10"></i>
				Python
				<l pink>Post 1.0</l>
			</h4>
			<p>A real-time, fast SDK library for Python with bi-directional communication over WebSockets.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-rust font-30 m-r-10"></i>
				Rust
				<l pink>Post 1.0</l>
			</h4>
			<p>A real-time, fast SDK library for Rust with bi-directional communication over WebSockets.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-node-js font-30 m-r-10"></i>
				Node.js
				<l green>Done</l>
			</h4>
			<p>A real-time, fast SDK library for Node.js with bi-directional communication, and support for <code>async</code> / <code>await</code> programming styles.</p>
		</block>
		<block>
			<h4 flex row middle>
				Deno
				<l purple>Planned for 1.x</l>
			</h4>
			<p>A real-time, fast SDK library for Deno with bi-directional communication, and support for <code>async</code> / <code>await</code> programming styles.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-php font-30 m-r-10"></i>
				PHP
				<l pink>Post 1.0</l>
			</h4>
			<p>A SDK library for PHP, with suport for data modification and querying.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-swift font-30 m-r-10"></i>
				Swift
				<l pink>Post 1.0</l>
			</h4>
			<p>A real-time, fast SDK library for Swift with bi-directional communication.</p>
		</block>
	</Layout::Blocks>

	<Layout::Line />

	<Layout::Blocks cols-3 as |block|>
		<block>
			<h4 flex row middle>
				<i class="fab fa-ember font-30 m-r-10"></i>
				Ember.js
				<l green>Done</l>
			</h4>
			<p>A real-time, live-updating library for Ember.js, with authentication, model definition, embedded types, and remote fetching.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-angular font-30 m-r-10"></i>
				Angular.js
				<l purple>Planned for 1.x</l>
			</h4>
			<p>A real-time, live-updating library for Angular.js, with authentication, model definition, embedded types, and remote fetching.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-react font-30 m-r-10"></i>
				React.js
				<l green>Done</l>
			</h4>
			<p>A real-time, live-updating library for React.js, with authentication, model definition, embedded types, and remote fetching.</p>
		</block>
		<block>
			<h4 flex row middle>
				<i class="fab fa-vuejs font-30 m-r-10"></i>
				Vue.js
				<l pink>Post 1.0</l>
			</h4>
			<p>A real-time, live-updating library for Vue.js, with authentication, model definition, embedded types, and remote fetching.</p>
		</block>
		<block>
			<h4 flex row middle>
				Apollo GraphQL
				<l pink>Post 1.0</l>
			</h4>
			<p>A real-time, live-updating library for Apollo GraphQL.</p>
		</block>
	</Layout::Blocks>

</section>